import numpy as np
import time as tm
from scipy.stats import lognorm,gamma,norm,expon,spearmanr
import pylab as plt
from studyResults import customaxis
# These are the "Tableau 20" colors as RGB.
cols = [(31, 119, 180), (174, 199, 232), (255, 127, 14), (255, 187, 120),
             (44, 160, 44), (152, 223, 138), (214, 39, 40), (255, 152, 150),
             (148, 103, 189), (197, 176, 213), (140, 86, 75), (196, 156, 148),
             (227, 119, 194), (247, 182, 210), (127, 127, 127), (199, 199, 199),
             (188, 189, 34), (219, 219, 141), (23, 190, 207), (158, 218, 229),
             (1, 119, 180), (1, 199, 232), (1, 127, 14), (1, 187, 120),
             (1, 160, 44), (1, 223, 138), (1, 39, 40), (1, 152, 150),
             (1, 103, 189), (1, 176, 213), (1, 86, 75), (1, 156, 148),
             (1, 119, 194), (1, 182, 210), (1, 127, 127), (1, 199, 199),
             (1, 189, 34), (1, 219, 141), (1, 190, 207), (1, 218, 229)]

# Scale the RGB values to the [0, 1] range, which is the format matplotlib accepts.
for i in range(len(cols)):
    r, g, b = cols[i]
    cols[i] = (r / 255., g / 255., b / 255.)


fig = plt.figure(1)
fig.set_size_inches(2.5,1.5)
ax = fig.add_subplot(1,1,1)
x = np.linspace(0,1000,1000)
#for i in [12.,8.,4.,2.0,1.0,0.5,0.0]:
#    y =  2.**(i*x*0.01)
##    ax.plot(x,100.-100.*(y/(y+1)),linewidth=2,alpha=1.,label=str(i),color=cols.pop(int(7)))
i  =np.linspace(0.5,12,1000)
ax.plot(i,38./60/24*100.*np.log2(9.)/i,linewidth=2,alpha=1.,color=cols.pop(int(7)))
ax.set_xlabel("Difference in growth rate", fontsize=10)
ax.set_ylabel("Time of displacement \n (generation times)", fontsize=10)
ax.legend(frameon=False, fontsize=10)
#plt.yscale('log')

#ax.set_ylim((1,51))
customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none', lw=1, size=10, pad=8)

plt.savefig('test5.pdf', bbox_inches='tight' ,dpi=300)
plt.show()

sleep()
x = np.linspace(0.01, 9., num=10)
for a in [0.001,0.01,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0]:
    b = 1.5/a
    tt  =gamma.pdf(x,a,scale=b,loc=0)

    tt = tt/np.sum(tt)

    y = []
    for i,t in enumerate(tt):
        y += [11*int(x[i])]*int(10000*t)
    y = np.asarray(y)
    print sorted(set(y))
    xxxx = 0
    for xx in sorted(set(y)):
        print xx, len(y[y==xx])
        xxxx += xx
    print float(len(y[y==0]))/len(y[y==99])


sleep()

"""
x = np.linspace(0.1, 10000., num=1000)
a = gamma.pdf(x,10.,scale=20.,loc=0)
a /= np.sum(a)
plt.plot(a)
x = np.linspace(0.1, 100., num=1000)
a = gamma.pdf(x,10.,scale=0.2,loc=0)
a /= np.sum(a)
plt.plot(a)
plt.show()
"""

vector =   [5.000000e-01, 1.000000e+00, 0.000000e+00, 6.031915e+01, 1.257350e+00, 8.081153e-01]

d = np.zeros(1000)
for jj in range(0,len(vector)-1,3):
    d += vector[jj]*gamma.pdf(x, vector[jj+1], loc=0, scale=vector[jj+2]) # probability distribution


plt.plot(d)
plt.show()

x = []
a = np.loadtxt('allCostsSt_S'+'0'+'.txt')
for i in range(100):
    print i, a[:,i].argmax()
print x
sleep()



"""
x = np.logspace(-5,2,1000)

y = x/(x+1)
plt.plot(x**(1),100*y)

y = 1./(x+1)
plt.plot(x**(-1),100*y)
plt.xscale('log')
plt.yscale('log')
plt.show()
"""

plt.show()

fig = plt.figure(1)
fig.set_size_inches(3.5,2.5)
ax = fig.add_subplot(1,1,1)
x = np.linspace(0,1000,1000)
#for i in [12.,8.,4.,2.0,1.0,0.5,0.0]:
#    y =  2.**(i*x*0.01)
##    ax.plot(x,100.-100.*(y/(y+1)),linewidth=2,alpha=1.,label=str(i),color=cols.pop(int(7)))
i  =np.linspace(0.5,12,1000)
ax.plot(i,100.*np.log2(9.)/i,linewidth=2,alpha=1.,color=cols.pop(int(7)))
ax.set_xlabel("Difference in growth rate", fontsize=10)
ax.set_ylabel("Time of displacement", fontsize=10)
ax.legend(frameon=False, fontsize=10)
#plt.yscale('log')

#ax.set_ylim((1,51))
customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none', lw=1, size=10, pad=8)

plt.savefig('test4.pdf', bbox_inches='tight' ,dpi=300)
plt.show()

sleep()
"""
#CIS  encuestas
a = np.array([[17.4,23.7,12.3,9.8,9.4,9.4],
[27.8,14.5,12.1,14.7,9.4,7.6],
[2.1,2,2.2,4.3,4.4,5.5],
[0.7,0.5,1.6,1.8,3.3,3.9],
[6.9,11.2,21.6,20.9,24.8,20.5],
[0.7,0.5,2.2,1.5,1.5,4.2]])

a = np.sum(np.reshape(a,(6,3,2)),2)


a = np.array([
[4.3,6.0,8.9,11.9,13.2,26.4],
[13.0,10.2,10.1,11.7,13.5,15.9],
[2.4,4.0,4.5,3.2,5.6,1.9],
[2.9,1.9,2.0,4.0,2.1,0.9],
[27.4,27.4,21.3,20.9,20.5,5.6],
[1.4,1.9,3.2,2.1,2.8,1.7]])
#a = np.sum(np.reshape(a,(6,2,3)),2)

labels = ["PP","PSOE","IU","UPyD","Podemos","Ciudadanos"]
edades = [1,2,3]
for line in range(6):
    for i in range(3):
        print "%s,%f,%F" %(labels[line],a[line,i],edades[i])


labels = ["PP","PSOE","IU","UPyD","Podemos","Ciudadanos"]
colors = [(0,140./255,1,1.),(1.,85./255,85./255,1),"red","magenta",(0,0,0.5,1.),"orange"]
fig = plt.figure()
fig.set_size_inches(10.,6.)
ax = fig.add_subplot(1,1,1)

for row in range(len(labels)):
    ax.plot(a[row,:]*100/np.sum(a[row,:]),label=labels.pop(0),alpha=0.8,linewidth=3,color=colors.pop(0))

#plt.xticks([0,1,2],[r"$<=$Primarios","Secundarios","Terciarios"])
#plt.xticks([0,1],[r"$<=44$",r"$>44$"])
#ax.set_xlabel("Nivel de estudios")
ax.set_xlabel("Edad")
ax.set_ylabel("Porcentaje de votantes")
plt.legend(loc=2,frameon=False,ncol=2)
customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none', lw=2, size=12, pad=8)
plt.savefig('test3.pdf', bbox_inches='tight' ,dpi=300)
plt.show()
sleep()

#Los gobiernos de Espana vienen determinados por la gente sin estudios. Tanto PP como PSOE consiguen el 50 de sus votos de gente con estudios primarios o sin estudios.
ax = plt.subplot(1,1,1)
x = np.linspace(0.01, 9., num=10)
print x
ii = 0
for a in [0.01,0.1,0.5,0.8,1.]:
    ii += 1
    b = 1.5/a
    tt  =gamma.pdf(x,a,scale=b,loc=0)

    tt = tt/np.sum(tt)

    y = []
    for i,t in enumerate(tt):
        y += [11*int(x[i])]*int(10000*t)
    y = np.asarray(y)
    print sorted(set(y))
    for xx in sorted(set(y)):
        print xx, len(y[y==xx])

    ax.plot(11*x,tt,linewidth=2,color=cols[2*ii],label=(str(a)))
customaxis(ax, c_left='k', c_bottom='k', c_right='none', c_top='none', lw=2, size=10, pad=8)
plt.legend()

plt.show()
"""
for noise in [0.1,0.5]:
    x = np.linspace(0.0, 100., num=101)
    tt  =expon.pdf(x,scale=noise,loc=0)
    tt = tt/np.sum(tt)

    y = []
    for i,t in enumerate(tt):
        y += [int(x[i])]*int(1000*t)
    plt.hist(y,alpha=0.2)

plt.show()



"""
"""



a= [5.515,4.424,4.18,5.194,3.69,5.615,4.922,2.235,2.88,2.756,3.798,2.276,4.425,4.249,4.564,4.117,4.227,4.954,5.317,5.332,4.06,4.094,6.03,4.582,5.472,4.385,1.622,4.41,3.665,3.496,5.918,4.01,5.15,5.39,4.417,6.607,6.185,2.206,2.36,5.195,4.328,3.886,2.38,3.54,5.336,3.826,5.66,6.589,5.311,5.524,4.368,6.508,7.116,5.194,4.967,5.13,5.215,5.213,5.48,5.174,1.214,3.764,4.722,4.766,5.222,4.305,5.319,4.952,5.31,5.13,5.598,4.175,6.099,5.313,6.665,5.122,4.095,6.011,6.838,5.998,4.406,5.649,4.216,4.399,4.173,3.411,5.165,6.098,6.445,3.668,6.1,4.075,2.702,5.193,3.886,5.99,5.423,4.595,5.527,4.018,5.515,2.862,5.905,4.583,4.76,3.662,5.491,4.702,4.108,5.37,3.688,5.029,5.042,4.267,6.129,4.997,4.175,4.16,4.935,3.965,3.22,5.92,5.455,5.022,4.86,4.6,4.605,4.82,5.39,4.75,4.464,4.556,14.2,4.185,4.179,6.185,3.116,6.358,5.193,5.193,5.815,5.815,7.322,7.322,3.33,3.467,3.43,4.028,4.305,4.555,4.214,4.767,5.13,5.302,4.745,5.429,5.635,6.638,6.351,5.648,5.77,5.22,4.725,5.19,5.323,4.056,5.864,5.017,3.889,3.512,4.417,4.628,5.975,4.27,4.326,4.276,5.215,5.357,2.811,3.565,5.37,5.57,5.15,4.274,6.132,4.767,3.116,1.891,2.209,3.212,4.122,2.964,5.13,3.673,5.11,4.143,5.685,4.283,2.229,3.24,5.11,4.118,3.229,5.35,4.404,3.701,5.525,2.061,3.693,2.805,5.52,5.62,5.32,4.69,4.166,2.407,4.851,2.942,2.34,5.19,4.385,5.49,1.56,2.395,5.701,5.941,6.346,5.129,6.015,4.597,3.625,2.598,3.647,5.332,5.12,3.937,5.48,5.577,4.517,4.784,4.183,5.493,4.807,5.31,2.809,5.455,5.364,4.601,0.919,3.694,4.772,5.59,4.745,5.109,4.392,4.432,4.69,4.69,4.249,3.69,4.993,4.484,4.98,5.215,4.557,5.19,2.985,1.35,2.959,0.914,5.857,6.03,7.78,2.86,0.45,7.14,2.809,7.144,3.625,4.345,3.011,3.876,3.763,4.344,4.56,4.935,4.94,4.467,4.596,3.348,4.084,6.241,2.364,7.391,7.197,0.506,3.221,6.792,7.028,4.824,4.822,4.41,4.387,4.788,2.48,3.19,3.772,4.118,4.565,5.122,5.309,5.893,6.042,7.164,6.125,5.568,6.225,5.513,3.516,3.26,5.3,6.177,7.74,7.515,4.69,4.444,4.605,4.128,3.579,5.431,4.01,6.03,2.76,2.371,4.174,5.023,5.975,4.273,4.094,6.12,5.856,2.379,6.19,4.391,0.925,3.711,3.43,5.519,5.823,5.19,5.502,4.816,1.658,4.551,3.578,3.505,5.521,6,5.781,4.415,3.936,4.165,2.86,5.189,5.301,3.18,5.132,0.456,4.629,5.025,2.962,5.48,5.38,4.075,4.079,4.895,4.708,5.014,5.37,4.821,4.598,5.376,5.266,5.594,4.595,5.37,7.33,5.777,6.372,5.195,5.642,6.823,6.829,5.995,5.11,7.612,5.151,5.37,4.401,6.61,6.275,7.548,6.518,5.37,5.372,0.785,5.387,4.302,2.247,5.031]
b = [5.051,3.836,2.708,3.618,2.669,5.046,2.702,2.345,2.346,3.266,3.104,2.293,3.549,2.776,3.127,2.405,3.465,3.561,4.612,4.542,9.11,3.265,2.697,6.177,3.165,4.129,2.652,3.109,5.073,2.664,2.162,2.76,3.319,3.524,2.688,13.457,2.892,2.305,2.276,3.277,2.193,1.606,1.835,1.916,3.014,1.569,4.514,6.689,3.745,5.83,2.6,7.491,5.784,3.464,4.517,3.146,3.558,3.556,3.974,3.566,1.99,2.094,3.491,3.499,4.196,2.189,3.308,3.262,2.858,2.261,2.567,1.921,6.694,10.664,14.056,3.136,4.932,3.794,5.121,2.582,2.56,4.052,3.807,4.739,4.002,3.262,5.044,7.145,39.64,5.154,7.478,5.148,2.862,2.952,1.606,5.547,4.006,3.68,4.718,2.892,4.961,2.939,7.17,14.183,3.894,2.91,5.074,3.559,2.875,4.109,3.306,3.504,3.817,3.291,5.171,3.477,1.861,1.46,3.522,2.586,3.506,4.929,4.763,3.561,3.302,2.925,2.891,2.784,2.799,2.917,2.818,2.891,1672.371,2.525,2.778,1.694,2.117,6.203,3.488,3.488,5.755,5.755,5.914,5.914,1.68,2.159,2.751,2.762,2.974,2.752,3.703,3.532,3.104,3.759,5.071,3.801,4.264,5.035,5.583,4.603,2.5,5.026,3.333,2.811,3.888,6.265,4.742,3.839,2.744,3.139,2.415,4.605,3.606,9.813,2.227,2.587,3.109,3.678,2.66,3.337,3.574,3.612,2.235,3.166,6.282,2.375,2.281,2.069,2.866,2.293,4.915,2.329,3.266,4.005,3.221,3.361,5.159,2.608,2.281,3.257,3.494,3.106,2.628,5.18,3.709,2.588,4.004,2.114,2.065,2.386,6.018,5.259,3.84,3.338,2.42,2.594,2.153,2.253,3.271,4.005,2.634,3.449,3.667,1.999,5.801,5.621,3.483,2.64,3.307,2.553,2.56,3.747,3.143,3.635,3.567,7.345,4.586,3.337,2.584,2.824,5.745,4.408,4.8,3.68,2.297,3.45,5.008,4.408,1.923,2.568,3.024,3.109,5.137,3.461,2.914,2.825,3.339,3.68,3.707,2.496,2.84,2.692,3.761,4.947,3.632,3.65,1.898,1.788,2.654,1.751,2.582,89.018,8.729,1.68,1672.371,10.26,3.257,12.111,1.812,5.068,3.165,4.111,3.123,3.559,3.73,3.667,3.509,2.846,2.874,2.583,4.704,5.902,1.18,2.443,6.11,1.606,2.67,3.326,3.463,2.88,3.464,3.266,3.257,3.464,2.047,2.287,2.194,2.661,3.163,4.611,4.596,6.229,10.557,15.404,22.439,13.649,87.581,22.49,4.128,4.447,3.528,5.322,4.661,1.595,3.19,3.478,3.745,3.339,3.675,5.579,3.708,30.351,230.877,1.718,3.733,4.553,7.059,2.61,5.035,8.367,6.974,1.671,13.718,7.093,1.861,2.762,11.776,5.089,9.934,4.061,4.976,4.111,2.377,2.725,2.707,2.631,3.846,7.251,2.293,6.807,4.639,4.301,1.885,5.333,2.784,2.293,2.221,1.589,9.19,3.7,3.135,19.428,6.366,3.129,2.784,3.103,3.446,3.668,3.464,3.493,3.109,2.584,3.134,3.699,3.566,2.784,8.051,4.459,1.916,2.538,8.704,5.192,3.168,3.666,2.767,8.581,5.326,11.372,5.033,6.216,3.462,4.967,11.221,3.188,3.557,2.799,5.066,3.399,2.116,3.759]

plt.plot(a,b,'.',ms=20)
plt.show()
print spearmanr(a,b)
sleep()
"""
for a in [0.01,0.02,0.03,0.04,0.05,0.06,0.07,0.08,0.09]:
    for j in np.linspace(15.,1500.,1000):
        x = np.linspace(0.01, 100., num=101)
        tt  =gamma.pdf(x,a,scale=j,loc=0)
        tt = tt/np.sum(tt)
        y = []
        for i,t in enumerate(tt):
            y += [11*int(x[i])]*int(1000*t)
        if max(y) == 99: print a,j

sleep()
#plt.plot(x,gamma.pdf(x,0.2,scale=13,loc=0))
#plt.show()
#plt.plot(tt)
#plt.hist(y)
#plt.show()
"""


"""
x = []
a = np.loadtxt('allCostsSt_S'+'0'+'.txt')
for i in range(100):
    x.append(a[:,i].argmax())
print x
sleep()
"""
"""
import pandas as pd

df = np.asarray(pd.read_csv("./dataDE/52Env_NN_PEAHSS101obs.txt"))
print df[-1,:]
a = df[:,1]
b = [-0.920429,-0.931036,-0.91172,-0.927742,-0.922176,-0.915789,-0.928968
,-0.918953,-0.91669,-0.925739,-0.92045,-0.919476,-0.92275,-0.925765
,-0.92047,-0.932923,-0.924943,-0.926202,-0.919963,-0.919807,-0.923102
,-0.920084,-0.921424,-0.919405,-0.920458,-0.919228,-0.919639,-0.919116
,-0.922779,-0.92704,-0.922002,-0.922445,-0.927002,-0.922993,-0.922846
,-0.918025,-0.920137,-0.920838,-0.923369,-0.92032,-0.920886,-0.922497
,-0.931086,-0.918129,-0.919154,-0.920398,-0.928748,-0.923487,-0.919686
,-0.921243,-0.924471,-0.920154,-0.920047,-0.926292,-0.916986,-0.924417
,-0.921986,-0.924287,-0.919401,-0.921759,-0.917232,-0.92947,-0.918827
,-0.92219,-0.923657,-0.921732,-0.926628,-0.920307,-0.919512,-0.92861
,-0.923869,-0.925838,-0.919988,-0.924206,-0.924575,-0.920941,-0.920502
,-0.919512,-0.925377,-0.923195,-0.923268,-0.921769,-0.917692,-0.92172
,-0.918614,-0.919664,-0.925682,-0.921336,-0.917966,-0.917786,-0.913878
,-0.925159,-0.924652,-0.919028,-0.923283,-0.919425,-0.923782,-0.926742
,-0.920467,-0.920203,-0.923103,-0.920184,-0.921114,-0.919369,-0.924857
,-0.919302,-0.927353,-0.92349,-0.92468,-0.91751,-0.919923,-0.925069
,-0.918907,-0.931249,-0.923266,-0.920382,-0.919851,-0.914445,-0.921343
,-0.929893,-0.926316,-0.919313,-0.927576,-0.92404,-0.929488,-0.921321
,-0.924615,-0.9223,-0.919721,-0.917483,-0.929017,-0.921225,-0.917345
,-0.919753,-0.918882,-0.921785,-0.927927,-0.915906,-0.928643,-0.924031
,-0.916332,-0.922757,-0.924179,-0.925479,-0.918177,-0.922882,-0.927081
,-0.918239,-0.92,-0.919355,-0.925183,-0.919275,-0.920285,-0.921616
,-0.922959,-0.921765,-0.928723,-0.924432,-0.920255,-0.92242,-0.916048
,-0.926922,-0.919455,-0.923371,-0.923461,-0.935263,-0.926798,-0.917623
,-0.926653,-0.919426,-0.927711,-0.922503,-0.918142,-0.924722,-0.920544
,-0.923357,-0.921103,-0.926673,-0.920495,-0.929177,-0.920582,-0.921264
,-0.924284,-0.92385,-0.922236,-0.921858,-0.91842,-0.926478,-0.922061
,-0.916706,-0.928382,-0.920944,-0.923862,-0.923594,-0.925555,-0.925527
,-0.923224,-0.917656,-0.924322,-0.923323,-0.919107,-0.918576,-0.921123
,-0.924481,-0.917444,-0.919991,-0.927689,-0.926549,-0.919249,-0.921594
,-0.920206,-0.918802,-0.924767,-0.924985,-0.919821,-0.930465,-0.932733
,-0.924086,-0.924359,-0.919543,-0.923481,-0.927977,-0.934891,-0.922761
,-0.91962,-0.921135,-0.927025,-0.92563,-0.91955,-0.928871,-0.917449
,-0.922306,-0.919385,-0.916971,-0.9199,-0.9184,-0.929677,-0.921779
,-0.926283,-0.925105,-0.918796,-0.918468,-0.916445,-0.924948,-0.921075
,-0.922811,-0.930694,-0.924748,-0.92213]

plt.plot(a,label='Variator')
plt.plot(b)
plt.legend()
plt.show()
#For each gene, the dynamics of the central dogma can be described by two parameters
# the burst frequency, a, which is the number of bursts per cell cycle; and the burst size,
# b, which is the avergae number of molecules produced per burst.

#scale = b
x=  [0.37049068152546732, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.12148447348973061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.93499195761746301]



plt.plot(x[:-1]/np.sum(x[:-1]))
plt.show()
sleep()
"""

a =(0.5, 100.)
b = (1., 50.)
x = np.linspace(0.1, 100., num=1000)

vector =   [0.8230977037400361, 4.985660527361568, 1.0, 0.0, 63.211058271313419, 7.6562126954191871, 0.80453445156608616]






d = np.zeros(1000)
for jj in range(0,len(vector)-1,3):
    d += vector[jj]*gamma.pdf(x, vector[jj+1], loc=0, scale=vector[jj+2]) # probability distribution


A3 = d/np.sum(d)

plt.plot(x,A3)
plt.show()

"""

def x(a):
    np.random.seed(3)
    print "1", [np.random.rand() for _ in range(5)]
    tm.sleep(0.1)
    print "2", [np.random.rand() for _ in range(5)]

from multiprocessing import Pool
possibleFactors = ["" for _ in range(1000)]
pool = Pool(processes=8)
fitness =  pool.map(x, possibleFactors)

pool.close()
pool.join() #zombie processes without this, will fill up memory
"""